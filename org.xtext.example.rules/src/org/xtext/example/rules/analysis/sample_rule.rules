rule "Timer Demo"
when
	Item Light_GF_Corridor_Ceiling received command
then
	if(receivedCommand==ON) {
		if(timer==null) {			
			timer = createTimer(now.plusSeconds(10)) [|
				sendCommand(Light_GF_Corridor_Ceiling, OFF)
			]
		} else {
			timer.reschedule(now.plusSeconds(10))
		}
	} else if(receivedCommand==OFF) {
		if(timer!=null) {
			timer.cancel
			timer = null
		}	
	}
	
end

rule "Away rule"
when
	Item State_Away changed 
then
	if( State_Away.state == ON )
	{
		if( State_Sleeping.state != OFF )
		{
			postUpdate(State_Sleeping, OFF)
		}
		if( State_Notify.state != ON )
		{
			postUpdate(State_Notify, ON)
		}
	}
end

rule "Compute humidex"
when
        Item Weather_Temperature changed or
		Item Weather_Humidity changed		
then
	var Number T = Weather_Temperature.state as DecimalType
	var Number H = Weather_Humidity.state as DecimalType	
	var Number x = 7.5 * T/(237.7 + T)
	var Number e = 6.112 * Math::pow(10, x.doubleValue) * H/100
	var Number humidex = T + (new Double(5) / new Double(9)) * (e - 10)
	postUpdate(Weather_Humidex, humidex)
end

rule "Update max and min temperatures"
when
	Item Weather_Temperature changed or
	Time cron "0 0 0 * * ?" or
	System started
then	
	postUpdate(Weather_Temp_Max, Weather_Temperature.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_Temp_Min, Weather_Temperature.minimumSince(now.toDateMidnight).state)
	logInfo("Weather", "Temperature evolved of " + Weather_Temperature.deltaSince(now.minusMinutes(2)) + " degrees.")
end
